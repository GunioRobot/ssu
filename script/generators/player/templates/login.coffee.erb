# This is the login part of the <%= org %>
# script, included by <%= script_path %>.js one level up.
#
# This part handles logging in, and contains all the
# logic and page element references related to it.
#
wesabe.provide "fi-scripts.<%= fid %>.login",
  # The "dispatch" function is called every time a page
  # load occurs (using the ondomready callback, not onload).
  #
  # It gives you an opportunity to look at the page, figure
  # out where you are, and take one or more actions.
  #
  # The function is called with several implicit arguments,
  # which means that they are not in the argument list, but
  # are nonetheless available. Here they are:
  #
  # @param [dom/Page] page
  #   A Page instance providing access to the just-loaded page,
  #   allows finding things on the page, filling in forms, etc.
  #
  #   While most of the time this will be the top-level Page in
  #   a Browser, it might also represent a frame inside another
  #   Page.
  #
  # @param [dom/Browser] browser
  #   A Browser instance, allows navigating away from the current
  #   URL and getting the current top-level URL.
  #
  # @param [download/Job] job
  #   Represents the status of one sync job, and has a status
  #   (numeric HTTP-like code, e.g. 200) and a result (string value that
  #   elaborates on the status, e.g. "ok").
  #
  #   It is used primarily to convey changes in state
  #   (e.g. job.update 'auth.creds' to mean "I'm filling in the user's
  #   credentials), as well as success and failure (i.e. job.succeed()
  #   and job.fail ..., examples below).
  #
  # @param [ActionProxy] action
  #   Calling "action.foo()" will run the "foo" action with all the
  #   right implicit arguments. Any arguments you pass will be ignored,
  #   so if you want to pass state around at all, use +tmp+.
  #
  # @param [Object] tmp
  #   An object that is the same throughout the job, and may be used
  #   to store and share state in +dispatch+ and any of the actions.
  #
  #  Often, this is used to store the list of accounts (tmp.accounts)
  #  and the current account (tmp.account).
  #
  #  You may NOT store page elements retrieved using page.find(),
  #  page.select(), etc. If you attempt to use them after the page
  #  has changed (i.e. dispatch has been called again) then passing
  #  them to page.click() etc. will simply do nothing.
  #
  # @param [Object] answers
  #   Contains the user's credentials, such as username and password.
  #   Also contains the answers to security questions.
  #
  # @param [Object] e
  #   The result of merging all the "elements" from the main Player
  #   and all sub-players together (e.g. e.login.user.field).
  #
  dispatch: ->
    # replace with your own custom logic for determining login status
    return if page.present e.logoff.link

    # replace with your own custom logic for how to log in
    #   NOTE: the order of the below is important
    #
    #   If you were to look for the username text field first
    #   then you would miss a possible error message on most
    #   websites, which show both an error message and the same
    #   form for the user to fill out again.
    #
    #   Because of this fact your dispatch will often start to look
    #   like it's doing things backwards, looking for the cases that
    #   come later, like errors logging in, before the cases that
    #   chronologically precede them, like doing the actual login.
    #
    if page.present e.login.error.user
      job.fail 401, 'auth.user.invalid'
    else if page.present e.login.error.pass
      job.fail 401, 'auth.pass.invalid'
    else if page.present e.login.error.creds
      job.fail 401, 'auth.creds.invalid'
    else if page.present(e.login.error.general
      job.fail 401, 'auth.unknown'
    else if page.present e.login.error.noAccess
      job.fail 403, 'auth.noaccess'
    else if page.present e.login.user.field
      action.login()

  # Actions are discrete steps that can be taken,
  # and often leave the current page, triggering
  # another call to dispatch.
  #
  # An example might be "login", as shown below,
  # which fills out the login form and submits it.
  #
  actions:
    # sample -- replace this with your own custom logic
    login: ->
      page.fill e.login.user.field, answers.username
      page.fill e.login.pass.field, answers.password
      # causes the form to be submitted, triggering another page
      # load, which then calls dispatch again -- hopefully as a
      # logged-in user this time
      page.click e.login.continueButton

    # sample -- replace this with your own custom logic
    logoff: ->
      page.click e.logoff.link
      # notify our owner that the job succeeded
      job.succeed()

  # elements are xpaths or sets of xpaths that
  # illustrate how to access a particular element
  # on a page
  #
  # used by the page.* methods, available as "e"
  # in dispatch and actions
  elements:
    login:
      user:
        field: [
          # for example:
          '//form[@name="signin"]//input[@type="text"][@name="user"]'
        ]

      pass:
        field: [
          # for example (this one has two, the 2nd being a fallback):
          '//input[@type="password"][@name="pass"]'
          '//form[@name="signin"]//input[@type="password"]'
        ]

      continueButton: [
      ]

      # possible error messages that you'll encounter logging in
      # it's likely that the bank will either show "invalid user"
      # and "invalid password" OR "invalid username and/or password",
      # but not both, so you'll probably need to trim some of this
      error:
        user: [
          # for example
          '//text()[contains(., "Invalid username")]'
        ]

        pass: [
          # for example
          '//text()[contains(., "Invalid password")]'
        ]

        creds: [
          # for example
          '//text()[contains(., "Invalid username or password")]'
        ]

        general: [
          # for example
          '//text()[contains(., "Could not log you in")]'
        ]

        noAccess: [
          # for example
          '//text()[contains(., "Your account has been locked")]'
        ]

    logoff:
      link: [
        # for example
        '//a[contains(string(.), "Logoff") or contains(string(.), "Logout")][contains(@href, "Logff")]'
      ]

    # For most security questions there are text nodes containing
    # the whole question and <input/> elements to put answers in.
    # If this fits <%= org %> then you can simply
    # fill out these xpaths below and call the
    # "answerSecurityQuestions" action.
    #
    # If not, you'll need to create your own action to handle
    # the custom logic for <%= org %>.
    security:
      # the elements of the questions
      questions: [
        # for example:
        '//form[@name="sq"]//label[contains(string(.), "?")]//text()'
      ]

      # the <input/> element for the answers
      answers: [
        # for example:
        '//form[@name="sq"]//input[@type="text"][contains(@name, "sq_answer")]'
      ]

      # optional, usually labelled "Don't ask me again on this computer"
      setCookieCheckbox: [
      ]

      # the "Next" or "Continue" button to submit the form
      continueButton: [
      ]